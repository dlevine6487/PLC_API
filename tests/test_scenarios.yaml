test_cases:
  - id: TC_APP_LOAD_AND_CONNECT_001
    description: "Verify app launch, file load simulation, and connection attempt."
    resolutions:
      - [1600, 900]
    actions:
      # Step 1: Ensure a clean state by clearing any previous session
      - type: "clear_session"
        description: "Clear the session to ensure the splash screen is shown."

      # Step 2: Verify the initial splash screen is visible
      - type: "wait_for_selector"
        selector: "dropZone" # Using POM logical name
        description: "Wait for the initial file drop zone to be visible."

      # Step 2: Load a test file using the application's API
      - type: "evaluate"
        script: "window.api.parseFiles(['/app/tests/fixtures/test_db.xml'])"
        description: "Load test file using the application's file parsing API."

      # Step 3: Wait for UI transition to complete
      - type: "wait"
        duration: 500 # Wait for the 300ms fade-in animation
        description: "Wait for UI transition animation."

      # Step 4: Verify the main dashboard appears and the splash screen is gone
      - type: "wait_for_selector"
        selector: "appContainer"
        description: "Wait for the main application container to be visible."
      - type: "wait_for_hidden"
        selector: "dropZone" # Using POM logical name
        description: "Verify the file drop zone is now hidden."

      # Step 4: VISUAL TEST - Take a screenshot of the loaded dashboard
      - type: "screenshot"
        name: "main-dashboard-loaded"
        description: "Take a screenshot for visual verification."
        selector: "page" # Special selector for page-level actions

      # Step 5: Verify key dashboard elements are visible
      - type: "wait_for_selector"
        selector: "leftPanel" # Using POM logical name
        description: "Check for the left panel."
      - type: "wait_for_selector"
        selector: "connectButton" # Using POM logical name
        description: "Check for the 'Connect' button."

      # Step 6: Initiate connection
      - type: "click"
        selector: "connectButton" # Using POM logical name
        description: "Click the 'Connect' button."

      # Step 7: Interact with the connection modal
      - type: "wait_for_selector"
        selector: "connectModal" # Using POM logical name
        description: "Wait for the connection modal to appear."
      - type: "fill"
        selector: "connectModalIpInput" # Using POM logical name
        value: "192.168.0.100"
        description: "Enter IP address into the modal."
      - type: "click"
        selector: "connectModalConfirmButton" # Using POM logical name
        description: "Click the 'Connect' button in the modal."

      # Step 8: Verify the modal closes
      - type: "wait_for_hidden"
        selector: "connectModal" # Using POM logical name
        description: "Verify the connection modal is now hidden."

    backend_check: null

  - id: TC_MODAL_INTERACTION_002
    description: "Verify the tag actions and write confirmation modals work correctly."
    resolutions:
      - [1600, 900]
    actions:
      # Step 1: Ensure a clean state by clearing any previous session
      - type: "clear_session"
        description: "Clear the session to ensure the splash screen is shown."

      # Prerequisite: Load the main dashboard
      - type: "wait_for_selector"
        selector: "dropZone"
      - type: "evaluate"
        script: "window.api.parseFiles(['/app/tests/fixtures/test_db.xml'])"
      - type: "wait"
        duration: 500
      - type: "wait_for_selector"
        selector: "appContainer"

      # Step 1: Click the action button for a specific tag
      - type: "wait_for_selector"
        selector: "testIntActionButton"
        description: "Wait for the action button for TestInt to be available."
      - type: "click"
        selector: "testIntActionButton"
        description: "Click the action button for the 'TestInt' tag."

      # Step 2: Verify Tag Actions modal appears
      - type: "wait_for_selector"
        selector: "tagActionsModal"
        description: "Wait for the Tag Actions modal to appear."

      # Step 3: Interact with the modal
      - type: "fill"
        selector: "actionsModalInput"
        value: "123"
        description: "Enter a new value for the tag."
      - type: "click"
        selector: "actionsModalConfirmWriteBtn"
        description: "Click the 'Write to PLC' button."

      # Step 4: Verify Write Confirmation modal appears
      - type: "wait_for_selector"
        selector: "writeConfirmModal"
        description: "Wait for the Write Confirmation modal to appear."

      # Step 5: Cancel the write operation
      - type: "click"
        selector: "writeConfirmCancelBtn"
        description: "Click the 'Cancel' button in the confirmation modal."

      # Step 6: Verify confirmation modal is hidden
      - type: "wait_for_hidden"
        selector: "writeConfirmModal"
        description: "Verify the confirmation modal is now hidden."

      # Step 7: Close the main actions modal
      - type: "click"
        selector: "actionsModalCloseBtn"
        description: "Click the 'Close' button in the Tag Actions modal."

      # Step 8: Verify the actions modal is hidden
      - type: "wait_for_hidden"
        selector: "tagActionsModal"
        description: "Verify the Tag Actions modal is now hidden."

    backend_check: null
